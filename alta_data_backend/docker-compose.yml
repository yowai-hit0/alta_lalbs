services:
  # FastAPI Application
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      # Core services (required)
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=alta_data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      
      # External services (optional - will use defaults if not set)
      - GCS_PROJECT_ID=${GCS_PROJECT_ID:-}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME:-}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
      - DOCUMENT_AI_PROCESSOR_ID=${DOCUMENT_AI_PROCESSOR_ID:-}
      - DOCUMENT_AI_LOCATION=${DOCUMENT_AI_LOCATION:-us}
      
      # Email service (optional)
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-25}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM=${SMTP_FROM:-no-reply@altadata.local}
      
      # Application settings
      - APP_ENV=${APP_ENV:-development}
      - SECRET_KEY=${SECRET_KEY:-changeme}
      - CORS_ORIGINS_RAW=${CORS_ORIGINS:-http://localhost:3000}
    volumes:
      # Only mount credentials if they exist and are not empty
      - ${GOOGLE_APPLICATION_CREDENTIALS:-./dummy-credentials.json}:/app/credentials.json:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: alta_data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d alta_data"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis (for caching, rate limiting, sessions)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # RabbitMQ (for background processing)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Celery Worker (OCR processing)
  worker-ocr:
    build: .
    command: celery -A app.worker.celery_app worker --loglevel=info --queues=ocr_queue --concurrency=2
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=alta_data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - GCS_PROJECT_ID=${GCS_PROJECT_ID}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
    volumes:
      - ./credentials.json:/app/credentials.json:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

  # Celery Worker (Transcription processing)
  worker-transcription:
    build: .
    command: celery -A app.worker.celery_app worker --loglevel=info --queues=transcription_queue --concurrency=2
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=alta_data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - GCS_PROJECT_ID=${GCS_PROJECT_ID}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
    volumes:
      - ./credentials.json:/app/credentials.json:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

  # Celery Worker (Email processing)
  worker-email:
    build: .
    command: celery -A app.worker.celery_app worker --loglevel=info --queues=email_queue --concurrency=4
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=alta_data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  beat:
    build: .
    command: celery -A app.worker.celery_app beat --loglevel=info
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=alta_data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

  # Celery Flower (monitoring)
  flower:
    build: .
    command: sh -c "sleep 30 && celery -A app.worker.celery_app flower --port=5555"
    ports:
      - "5555:5555"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=alta_data
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672//
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  default:
    name: alta_data_network
